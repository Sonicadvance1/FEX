name: Build + Test

on:
  push:
    branches:
      - bench_test

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CC: clang
  CXX: clang++

jobs:
  build:
    runs-on: ${{ matrix.arch }}
    strategy:
      matrix:
        arch: [[self-hosted, x64]]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2

    - name : submodule checkout
      # Need to update submodules
      run: git submodule update --init --depth 1

    - name: Clean Build Environment
      run: rm -Rf ${{runner.workspace}}/build

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G Ninja -DENABLE_LTO=False -DENABLE_ASSERTIONS=True -DENABLE_BENCHMARK=True

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE --target FEXLoader

    - name: CI Load Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      env:
        FEXLoader: ${{runner.workspace}}/build/Bin/FEXLoader
        FEXArgs: "/usr/bin/povray +i/usr/share/doc/povray/examples/advanced/biscuit.pov +L/usr/share/povray-3.7/include/ -f -d +w160 +h120 +a0.3 +wt1"
      run: pytest $GITHUB_WORKSPACE/Scripts/Execute_FEX.py --benchmark-json output.json

      # Download previous benchmark result from cache (if exists)
    - name: Download previous benchmark data
      uses: actions/cache@v1
      with:
        path: ./cache
        key: ${{ runner.os }}-benchmark
    - name: Store benchmark result
      uses: rhysd/github-action-benchmark@v1
      with:
        # What benchmark tool the output.txt came from
        tool: 'pytest'
        # Where the output from the benchmark tool is stored
        output-file-path: ${{runner.workspace}}/build/output.json
        # Where the previous data file is stored
        external-data-json-path: ./cache/benchmark-data.json
        # Workflow will fail when an alert happens
        fail-on-alert: true

